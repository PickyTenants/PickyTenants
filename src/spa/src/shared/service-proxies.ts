//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class TenantFeedbackServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addReview(body: AddReviewDto | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/TenantFeedback/AddReview";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddReview(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddReview(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processAddReview(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    searchReviews(body: SearchPropertyDto | undefined): Observable<PropertyDto> {
        let url_ = this.baseUrl + "/api/TenantFeedback/SearchReviews";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchReviews(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchReviews(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PropertyDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PropertyDto>;
        }));
    }

    protected processSearchReviews(response: HttpResponseBase): Observable<PropertyDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PropertyDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PropertyDto>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getReviewDetails(id: number | undefined): Observable<ReviewDetailsDto> {
        let url_ = this.baseUrl + "/api/TenantFeedback/GetReviewDetails?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetReviewDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReviewDetails(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReviewDetailsDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReviewDetailsDto>;
        }));
    }

    protected processGetReviewDetails(response: HttpResponseBase): Observable<ReviewDetailsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReviewDetailsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ReviewDetailsDto>(null as any);
    }
}

export class AddReviewDto implements IAddReviewDto {
    propertyId!: number;
    review!: ReviewDetailsDto;

    constructor(data?: IAddReviewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.propertyId = _data["propertyId"];
            this.review = _data["review"] ? ReviewDetailsDto.fromJS(_data["review"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AddReviewDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddReviewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyId"] = this.propertyId;
        data["review"] = this.review ? this.review.toJSON() : <any>undefined;
        return data;
    }

    clone(): AddReviewDto {
        const json = this.toJSON();
        let result = new AddReviewDto();
        result.init(json);
        return result;
    }
}

export interface IAddReviewDto {
    propertyId: number;
    review: ReviewDetailsDto;
}

export class PropertyDto implements IPropertyDto {
    id!: number;
    lat!: number;
    lng!: number;
    address!: string | undefined;
    unitNumber!: number;
    streetNumber!: number;
    street!: string | undefined;
    suburb!: string | undefined;
    country!: string | undefined;
    postalCode!: string | undefined;
    propertyReviews!: ReviewSummaryDto[] | undefined;

    constructor(data?: IPropertyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.lat = _data["lat"];
            this.lng = _data["lng"];
            this.address = _data["address"];
            this.unitNumber = _data["unitNumber"];
            this.streetNumber = _data["streetNumber"];
            this.street = _data["street"];
            this.suburb = _data["suburb"];
            this.country = _data["country"];
            this.postalCode = _data["postalCode"];
            if (Array.isArray(_data["propertyReviews"])) {
                this.propertyReviews = [] as any;
                for (let item of _data["propertyReviews"])
                    this.propertyReviews!.push(ReviewSummaryDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PropertyDto {
        data = typeof data === 'object' ? data : {};
        let result = new PropertyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["lat"] = this.lat;
        data["lng"] = this.lng;
        data["address"] = this.address;
        data["unitNumber"] = this.unitNumber;
        data["streetNumber"] = this.streetNumber;
        data["street"] = this.street;
        data["suburb"] = this.suburb;
        data["country"] = this.country;
        data["postalCode"] = this.postalCode;
        if (Array.isArray(this.propertyReviews)) {
            data["propertyReviews"] = [];
            for (let item of this.propertyReviews)
                data["propertyReviews"].push(item.toJSON());
        }
        return data;
    }

    clone(): PropertyDto {
        const json = this.toJSON();
        let result = new PropertyDto();
        result.init(json);
        return result;
    }
}

export interface IPropertyDto {
    id: number;
    lat: number;
    lng: number;
    address: string | undefined;
    unitNumber: number;
    streetNumber: number;
    street: string | undefined;
    suburb: string | undefined;
    country: string | undefined;
    postalCode: string | undefined;
    propertyReviews: ReviewSummaryDto[] | undefined;
}

export class ReviewDetailsDto implements IReviewDetailsDto {
    id!: number;
    tenantName!: string | undefined;
    createdAt!: Date;
    title!: string | undefined;
    summary!: string | undefined;
    details!: string | undefined;
    landloardName!: string | undefined;
    propertyManagerName!: string | undefined;
    propertyManagementCompany!: string | undefined;
    averageRating!: number;

    constructor(data?: IReviewDetailsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenantName = _data["tenantName"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.title = _data["title"];
            this.summary = _data["summary"];
            this.details = _data["details"];
            this.landloardName = _data["landloardName"];
            this.propertyManagerName = _data["propertyManagerName"];
            this.propertyManagementCompany = _data["propertyManagementCompany"];
            this.averageRating = _data["averageRating"];
        }
    }

    static fromJS(data: any): ReviewDetailsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReviewDetailsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantName"] = this.tenantName;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["title"] = this.title;
        data["summary"] = this.summary;
        data["details"] = this.details;
        data["landloardName"] = this.landloardName;
        data["propertyManagerName"] = this.propertyManagerName;
        data["propertyManagementCompany"] = this.propertyManagementCompany;
        data["averageRating"] = this.averageRating;
        return data;
    }

    clone(): ReviewDetailsDto {
        const json = this.toJSON();
        let result = new ReviewDetailsDto();
        result.init(json);
        return result;
    }
}

export interface IReviewDetailsDto {
    id: number;
    tenantName: string | undefined;
    createdAt: Date;
    title: string | undefined;
    summary: string | undefined;
    details: string | undefined;
    landloardName: string | undefined;
    propertyManagerName: string | undefined;
    propertyManagementCompany: string | undefined;
    averageRating: number;
}

export class ReviewSummaryDto implements IReviewSummaryDto {
    id!: number;
    tenantName!: string | undefined;
    createdAt!: Date;
    title!: string | undefined;
    summary!: string | undefined;
    landloardName!: string | undefined;
    propertyManagerName!: string | undefined;
    propertyManagementCompany!: string | undefined;
    averageRating!: number;

    constructor(data?: IReviewSummaryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tenantName = _data["tenantName"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.title = _data["title"];
            this.summary = _data["summary"];
            this.landloardName = _data["landloardName"];
            this.propertyManagerName = _data["propertyManagerName"];
            this.propertyManagementCompany = _data["propertyManagementCompany"];
            this.averageRating = _data["averageRating"];
        }
    }

    static fromJS(data: any): ReviewSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReviewSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tenantName"] = this.tenantName;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["title"] = this.title;
        data["summary"] = this.summary;
        data["landloardName"] = this.landloardName;
        data["propertyManagerName"] = this.propertyManagerName;
        data["propertyManagementCompany"] = this.propertyManagementCompany;
        data["averageRating"] = this.averageRating;
        return data;
    }

    clone(): ReviewSummaryDto {
        const json = this.toJSON();
        let result = new ReviewSummaryDto();
        result.init(json);
        return result;
    }
}

export interface IReviewSummaryDto {
    id: number;
    tenantName: string | undefined;
    createdAt: Date;
    title: string | undefined;
    summary: string | undefined;
    landloardName: string | undefined;
    propertyManagerName: string | undefined;
    propertyManagementCompany: string | undefined;
    averageRating: number;
}

export class SearchPropertyDto implements ISearchPropertyDto {
    lat!: number;
    lng!: number;
    address!: string | undefined;
    unitNumber!: number;
    streetNumber!: number;
    street!: string | undefined;
    suburb!: string | undefined;
    country!: string | undefined;
    postalCode!: string | undefined;

    constructor(data?: ISearchPropertyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.lat = _data["lat"];
            this.lng = _data["lng"];
            this.address = _data["address"];
            this.unitNumber = _data["unitNumber"];
            this.streetNumber = _data["streetNumber"];
            this.street = _data["street"];
            this.suburb = _data["suburb"];
            this.country = _data["country"];
            this.postalCode = _data["postalCode"];
        }
    }

    static fromJS(data: any): SearchPropertyDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchPropertyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lat"] = this.lat;
        data["lng"] = this.lng;
        data["address"] = this.address;
        data["unitNumber"] = this.unitNumber;
        data["streetNumber"] = this.streetNumber;
        data["street"] = this.street;
        data["suburb"] = this.suburb;
        data["country"] = this.country;
        data["postalCode"] = this.postalCode;
        return data;
    }

    clone(): SearchPropertyDto {
        const json = this.toJSON();
        let result = new SearchPropertyDto();
        result.init(json);
        return result;
    }
}

export interface ISearchPropertyDto {
    lat: number;
    lng: number;
    address: string | undefined;
    unitNumber: number;
    streetNumber: number;
    street: string | undefined;
    suburb: string | undefined;
    country: string | undefined;
    postalCode: string | undefined;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}